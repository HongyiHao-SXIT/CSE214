<html>

<head>
<title>CSE214 Homework 1</title>
</head>

<body bgcolor="#FFFFFF" style="margin:2em">
<h2 align="center"><img border="0" src="http://www.cs.sunysb.edu/~cse214/images/logo.gif" width="200" height="100">&nbsp; <font
color="#800080"><br>
</font><font color="#800000" face="Arial">HOMEWORK - SPRING 2025</font></h2>

<hr>

<h3><font face="Arial"><strong>HOMEWORK 1 - Sunday, March 9<sup>th</sup>                      
 before 7PM (China time)<br>
 &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;


 </strong></font></h3>

<p><font face="Arial"><strong>REMINDERS: 
<ul>
<li>Be sure your code follows the <a href="http://www.cs.sunysb.edu/~cse214/codingstyle.htm">coding
style</a> for CSE214. </li>

<li>Make sure you read the warnings about <a href="http://www.cs.sunysb.edu/~cse214/courseinfo.htm">academic
dishonesty</a>. <i>Remember, all work you submit for homework assignments MUST be entirely your own work. Also, 
group efforts are not allowed.</i> </li>

<li>Submit Assignment: upload and submit your assignment in QQ Group.  </li>

<li><span style="color:red">You are not allowed to use ArrayList, Vector or any other Java API Data Structure classes to implement this assignment.</span></li>
<li>You may use Scanner, InputStreamReader, or any other class that you wish for keyboard input.</li>
</ul>
	 </strong></font></p>


<p><font face="Arial"><strong>
In this assignment, you will be required to write an ADT that represents a playlist of audio files similar to the ones used by 
audio playback programs such as iTunes and Windows Media Player. Your ADT will be responsible for maintaining simple information about each audio file (namely 
the title, artist, and length in minutes and seconds) as well as the correct ordering of the audio files in the list. The ADT should also provide a series
 of operations for manipulating the playlist including adding and removing audio files, displaying the contents of the list, and finding all songs that were 
performed by a particular artist. </strong></font></p>
<p><font face="Arial"><strong>1. Write a fully-documented class named SongRecord which contains information about a particular audio file. It should have
member variables for the title and artist (both strings) as well as two member variables for the song's length in minutes and seconds (both ints). You 
should provide accessor and mutator methods for each variable as well as a default constructor. For the mutator method of the seconds variable, you should 
throw an exception if the new value is less than 0 or greater than 59. For the mutator method of the minutes variable, you should throw an exception if 
the new value is negative. Finally, you should provide a toString() method that neatly prints the information about the audio file on a single line as 
shown below in the sample output.</strong></font></p>
<p><font face="Arial"><strong>2. Write a fully-documented class named Playlist that stores all SongRecord objects that belong to a particular playlist. 
 The SongRecord objects should be stored in <span style="color:red">an array</span>. <!-- where position 0 denotes the first song in the playlist, position 1 denotes the second, position 2 
denotes the third, and so on.-->
There should be a maximum of 50 SongRecord objects allowed,  a number which should be defined as a final variable.  The class will be based on the following
 ADT specification:</strong></font></p>
<blockquote>
  <p><strong><font face="Courier New">public class Playlist </font><font face="Arial"><br>
  The Playlist class implements an abstract data type for a playlist of audio files supporting common operations on such lists of audio files.</font></strong>
</p>
</blockquote>
<ul>
  <li><strong><font face="Arial">Constructor for Playlist<br>
    </font><font face="Courier New">public Playlist()</font><font face="Arial"><br>
    Construct an instance of the Playlist class with no SongRecord objects in it.<br>
    <em>Postcondition:</em><br>
    This Playlist has been initialized to an empty list of SongRecords.<br>
  </font></strong></li>
  <li><strong><font face="Arial">clone<br>
    </font><font face="Courier New">public Object clone()</font><font face="Arial"><br>
    Generate a copy of this Playlist.<br>
    <em>Returns:</em> <br>
    The return value is a copy of this Playlist. Subsequent changes to the
    copy will not affect the original, nor vice versa. Note that the return
    value must be typecast to a Playlist before it can be used.<br>
    </font></strong></li>
  <li><strong><font face="Arial">equals<br>
    </font><font face="Courier New">public boolean equals (Object obj)</font><font face="Arial"><br>
    Compare this Playlist to another object for equality.<br>
    <em>Parameters:</em><br>
    </font><font face="Courier New">obj</font><font face="Arial"> - an object in which this Playlist is compared<br>
    <em>Returns:</em><br>
    A return value of true indicates that </font><font face="Courier New">obj</font><font face="Arial"> refers to a Playlist object with
    the same SongRecords in the same order as this Playlist. Otherwise, the return value is false.<br>
    <font color="black">Note:</font><br>
    If </font><font face="Courier New">obj</font><font face="Arial"> is null or it is not a Playlist object, then the return value is
    false.</font></strong><strong><font face="Arial"><br>
    <font color="black">Note:</font><br>
When comparing equality between two SongRecord objects, you must verify that their titles, artists, and song lengths are all the same. 
Using the == operator will simply check to see if the two variables <em>refer to the same SongRecord object, </em>which does not take into consideration
 that two different SongRecord objects can actually represent the same audio file. To solve this problem, you can either check that each of the properties 
of the two objects are the same (title, artist, and length) inside of this method, or you may simplify this process by implementing an equals method
 (similar to this one) for the SongRecord class.<br>
<font color="black"></font></font></strong></li>
  <li><strong><font face="Arial">size<br>
    </font><font face="Courier New">public int size()</font><font face="Arial"><br>
  Determines the number of SongRecords currently in this Playlist.<br>
  <em>Preconditions:</em><br>
  This PlayList object has been instantiated.<br>
  <em>Returns:</em><br>
  The number of SongRecords in this Playlist.</font></strong><strong><font face="Arial"><br>
  </font></strong></li>
  <li><strong><font face="Arial">addSong<br>
    </font><font face="Courier New">public void addSong(SongRecord song, int position)</font><font face="Arial"><br>
    <em>Parameters:</em><br>
    </font><font face="Courier New">song</font><font face="Arial"> - the new SongRecord object to add to this Playlist <br>
    </font><font face="Courier New">position</font><font face="Arial"> - the position in the playlist where the </font><font face="Courier New">song</font><font face="Arial"> will be inserted <br>
    <em>Preconditions:</em><br>
    This SongRecord object has been instantiated and 1 <u>&lt;</u></font><font face="Courier New"> position</font> <font face="Arial"><u>&lt;</u>    songs_currently_in_playlist + 1. The number of SongRecord 
objects in this Playlist is less than max_songs. <br>
    <em>Postcondition:</em><br>
    The new SongRecord is now stored at the desired position in the Playlist. All SongRecords that were originally in positions greater than or equal 
to position are moved back one position. (Ex: If there are 5 songs in a Playlist, positions 1-5, and you insert a new SongRecord at position 4, the new 
SongRecord will now be at position 4, the SongRecord that was at position 4 will be moved to position 5, and the SongRecord that was at position 5 will be moved to  
position 6). <br>
    Throws:<br>
    <font face="Courier New">IllegalArgumentException</font><br>
    Indicates that position is not within the valid range.<br>
<font face="Courier New">FullPlaylistException</font><br>
Indicates that there is no more room inside of the Playlist to store the new SongRecord object.<br>
<font color="black"></font><font color="black">Note 1:</font><br>
</font><font face="Courier New">position</font><font face="Arial"> refers to the position in the Playlist and not the position inside the array.
<!--Remember that the song in Playlist position 1 is stored in array
 position 0, the song in Playlist position 2 is stored in array position 1, the song in Playlist position 3 is stored in array position 2, and so on. -->
    </font></strong><strong><font face="Arial"></font></strong><strong><font face="Arial"><br>
    <font color="black">Note 2:</font><br>
Inserting a song to position (songs_currently_in_playlist + 1) is effectively the same as adding a song to the end of the Playlist.<br>
</font></strong></li>
  <li><strong><font face="Arial">removeSong<br>
    </font><font face="Courier New">public void removeSong(int position)</font><font face="Arial"><br>
  <em>Parameters:</em><br>
  </font><font face="Courier New">position</font><font face="Arial"> - the position in the playlist where the song will be removed from. <br>
  <em>Preconditions:</em><br>
  This PlayList object has been instantiated and 1 <u>&lt;</u></font><font face="Courier New"> position</font> <font face="Arial"><u>&lt;</u> songs_currently_in_playlist. <br>
  <em>Postcondition:</em><br>
  The  SongRecord at the desired position in the Playlist has been removed. All SongRecords that were originally in positions greater than or equal to 
position are moved forward one position. (Ex: If there are 5 songs in a Playlist, positions 1-5, and you remove the SongRecord at position 4, the 
SongRecord that was at position 5 will be moved to position 4). <br>
  Throws:<br>
  <font face="Courier New">IllegalArgumentException</font><br>
  Indicates that  </font><font face="Courier New">position</font><font face="Arial"> is not within the valid range.<br>
  <font color="black">Note:</font><br>
  </font><font face="Courier New">position</font><font face="Arial"> refers to the position in the Playlist and not the position inside the array.
<!--Remember that the song in Playlist position 1 is stored in array 
position 0, the song in Playlist position 2 is stored in array position 1, the song in Playlist position 3 is stored in array position 2, and so on. -->
<br>
  </font></strong></li>
  <li><strong><font face="Arial">getSong</font><font face="Arial"><br>
  </font>
<font face="Courier New">public SongRecord getSong(int position)</font><br>
    <font face="Arial">Get the SongRecord at the given position in this Playlist object.<br>
    <em>Parameters:</em><br>
    </font><font face="Courier New">position</font><font face="Arial"> - position of the SongRecord to retrieve <br>
    <em>Preconditions:</em><br>
    This Playlist object has been instantiated and 1 <u>&lt;</u></font><font face="Courier New"> position</font> <font face="Arial"><u>&lt;</u>    songs_currently_in_playlist.<br>
    <em>Returns:</em><br>
    The SongRecord at the specified position in this Playlist object.<br>
    Throws:<br>
    <font face="Courier New">IllegalArgumentException</font><br>
    Indicates that position is not within the valid range.<br>
    <font color="black">Note:</font><br>
</font><font face="Courier New">position</font><font face="Arial"> refers to the position in the Playlist and not the position inside the array.
<!--Remember that the song in Playlist position 1 is stored in array 
position 0, the song in Playlist position 2 is stored in array position 1, the song in Playlist position 3 is stored in array position 2, and so on. -->
    </font></strong><strong><font face="Arial"></font></strong><strong><font face="Arial"><br>
    </font></strong></li>
  <li><strong><font face="Arial">printAllSongs<br>
  </font><font face="Courier New">public void printAllSongs()</font><font face="Arial"><br>
Prints a neatly formatted table of each SongRecord in the Playlist on its own line with its position number as shown in the sample output.<br>
<em>Preconditions:</em><br>
This PlayList object has been instantiated.<br>
<em>Postcondition:</em><br>
 A neatly formatted table of each SongRecord in the Playlist on its own line with its position number has been displayed to the user.<br>
<font color="black">Note:</font><br>
</font><font face="Courier New">position</font><font face="Arial"> refers to the position in the Playlist and not the position inside the array.
<!--Remember that the song in Playlist position 1 is stored in array 
position 0, the song in Playlist position 2 is stored in array position 1, the song in Playlist position 3 is stored in array position 2, and so on. -->
<br>
<font color="green">Hint:<br>
 If your toString() method is implemented correctly as described below, you will simply need to call it and print the results to the user. </font><br>
    </font></strong></li>
  <li><strong><font face="Arial">getSongsByArtist<br>
      </font><font face="Courier New">public static Playlist getSongsByArtist(Playlist originalList,
      String artist)</font><font face="Arial"><br>
      Generates a new Playlist containing all SongRecords in the original Playlist performed by the specified artist.<br>
      <em>Parameters:</em><br>
      </font><font face="Courier New">originalList</font><font face="Arial"> - the original Playlist <br>
      </font><font face="Courier New">artist</font><font face="Arial"> - the name of the artist <br>
      <em>Preconditions:</em><br>
      The Playlist referred to by originalList has been instantiated.<br>
      <em>Returns:</em><br>
      A new Playlist object containing all SongRecords in the original Playlist performed by the specified artist. <br>
      <font color="black">Note:</font><br>
      The return value is null if either </font><font face="Courier New">originalList</font><font face="Arial"> or </font><font face="Courier New">artist</font><font face="Arial"> is null.<br>
      <font color="black" face="Arial, Helvetica, sans-serif">Note:</font><br>
  The order of the SongRecords in the new Playlist should relate to the order of the SongRecords in the old Playlist. For example, if the original 
Playlist has 8 SongRecords, positions 1-8, and SongRecords 3, 6, and 8 were performed by the specified artist, the new Playlist should have the 
SongRecord  originally at position 3  placed at location  1, the SongRecord  originally at position 6 placed at location 2, and the SongRecord  originally at position 

8  placed at location  3.<br>
      </font></strong>
  <strong><font face="Arial"></font></strong><strong><font face="Arial"></font></strong>
  <li><strong><font face="Arial">toString<br>
    public String toString()<br>
    Gets the String representation of this Playlist object, which is a neatly formatted table of each SongRecord in the Playlist on its own line 
with its position number as shown in the sample output.<br>
    <em>Returns:</em><br>
    The String representation of this Playlist object.<br>
    <font color="black">Note:</font><br>
Position refers to the position in the Playlist and not the position inside the array. <!--Remember that the song in Playlist position 1 is stored in 
array position 0, the song in Playlist position 2 is stored in array position 1, the song in Playlist position 3 is stored in array position 2, and 
so on. --></font></strong></li>
  
  </li>
</ul>
<font face="Arial"></font>
<p><font face="Arial"><strong>3. Write a fully documented class named PlaylistOperations that
is based on the following specification:</strong></font></p>
<font face="Arial"></font><blockquote><font face="Arial"><strong>public class PlaylistOperations</strong><br>
  <b>The </b><strong>Playlist</strong><b><strong>Operations</strong> Java application tests the methods of
the Playlist class and allows the user to manipulate a single Playlist object by performing
operations on it.</b></font></blockquote>
<font face="Arial"></font>
<ul>
<li>
<font face="Arial"><b>main</b></font>
<font face="Arial"><b>public static void main(String[] args)</b>
<br>
<b>The main method runs a menu driven application which first creates an empty Playlist and then prompts the user for a menu command selecting the 
operation. The required information is then requested from the user based on the selected operation. Following is the list of menu options and their required information:</b>

<pre>	
    Add Song:               A  &lt;Title&gt; &lt;Artist&gt; &lt;Minutes&gt; &lt;Seconds&gt; &lt;Position&gt;
    Get Song:               G  &lt;Position>
    Remove Song:            R  &lt;Position&gt; 
    Print All Songs:        P  
    Print Songs By Artist:  B  &lt;Artist&gt;
    Size:                   S  
    Quit:                   Q
</pre>
</li></ul>
<p><font face="Arial"><b>4. You will also need a class to handle the exception FullPlaylistException.</b></font></p>
  <p><b><font color=red>Note: You may include additional methods in the SongRecord, Playlist, or PlaylistOperations  as necessary. </font></b>
  </pre>
  </ul>
</p>

  <p><b><u>INPUT FORMAT:</u></b><ul>   <b>
<li>Each menu operation is entered on its own line and should be case insensitive (i.e. 'q' and 'Q' are the same).
<li>Check to make sure that the position, if required, is valid. If not, print an error message and return to the menu. 
<li>For the Add Song command, if the input information is valid, construct the object accordingly.  Otherwise, print an error message  and 
 return to the menu.
<li>You may assume that the lengths of the input for the song titles and artists are less than 25 characters long. 
  </b></ul>
 
<p><b><u>OUTPUT FORMAT:</u></b><ul>  <b>
<li>Echo the input information for the Add Song command in the output.
<li>All menu operations must be accompanied by a message indicating what operation was performed and whether or not it was successful.
<li>The seconds of the song length must always be printed as two digits (Ex: 3:09 is valid but 3:9 is not).
<font color="green">
<li>All lists must be printed in a nice and tabular form as shown in the sample output. 
You may use C style formatting as shown in the following example. The example below shows two different ways of displaying the name and address at pre-specified positions 21, 26, 19, and 6 spaces wide. If the '-' flag is given, then it will be left-justified (padding will be on the right), else the region is right-justified. The 's' identifier is for strings, the 'd' identifier is for integers. Giving the additional '0' flag pads an integer with additional zeroes in front.
<pre>
    String name = "Doe Jane";
    String address = "32 Bayview Dr.";
    String city = "Fishers Island, NY";
    int zip = 6390;
    
System.out.println(String.format("%-21s%-26s%19s%06d", name, address, city, zip));
System.out.printf("%-21s%-26s%19s%06d", name, address, city, zip);

Doe Jane             32 Bayview Dr.             Fishers Island, NY 06390
Doe Jane             32 Bayview Dr.             Fishers Island, NY 06390
</pre>
</font>

</b>
</ul>

<p><b><u>HINTS:</u></b></p>
<ul>
  <li><b>Remember that the position parameter to all of the methods listed in the Playlist class refers to the song at a given position within a
 playlist (starting at position 1) and not the position inside of the array (which starts at position 0). There are two ways that you can handle
 this issue: </b>
  <ul>
    <li><b>Store song 1 in array position 0, song 2 in array position 1, and so on and so forth. Inside each method, subtract one from the position 
given by the parameter to find the appropriate position within the array. </b>
    <li><b>Define your array such that it is of size MAX_SONGS + 1 instead of MAX_SONGS. Store song 1 in array position 1, song 2 in array position 2, 
and so on and so forth. Position 0 of the array will not be used. </b>
  </ul>
</ul>


 <p style="color:red"><b><u>EXTRA CREDIT:</u></b><ul>   <b>

<li> Provide an option to play the song. For this option, you should input the song's filename along with other information related to each song (title, artist, duration, etc.). [4 points]	 
<!--li> Use GUI for all the user interface (input/output). [up to 7 points depending on how well you incorporate the GUI options]-->
<li> Add the following menu options to create and manage multiple playlists: [4 points]
<ol>
	<li> N - Create a new playlist and set as current playlist. Input the playlist name from the user. 
    <li> V - Change current playlist. Input the playlist name from the user.
    <li> C - Copy the current playlist's songs into a new playlist. Input the new playlist name from the user.
    <li> E - Compare the songs in the current playlist with the given playlist. Input the given playlist name from the user.		
    <li> D - Display all playlist names.
</ol>
  </b></ul>


<p><b><u>SAMPLE INPUT/OUTPUT:</u> <!---font color="red">(best viewed in Internet Explorer)</font---></b>
<pre><b>Note: User input is in black, computer generated output appears in <font color="blue">blue</font> and comments are in <font color="green">green</font>.</b>

<font color="blue"> 
A) Add Song 
B) Print Songs by Artist 
G) Get Song 
R) Remove Song 
P) Print All Songs 
S) Size 
Q) Quit </font>

<font color="blue">Select a menu option: </font>A	

<font color="blue">Enter the song title: </font>Radioactive
<font color="blue">Enter the song artist: </font>Imagine Dragons
<font color="blue">Enter the song length (minutes): </font>4
<font color="blue">Enter the song length (seconds): </font>28
<font color="blue">Enter the position: </font>1
<font color="blue">Song Added: Radioactive By Imagine Dragons

<font color="green">// menu not shown in the sample input/output</font>
Select a menu option: </font>A	

<font color="blue">Enter the song title: </font>Push
<font color="blue">Enter the song artist: </font>Matchbox 20
<font color="blue">Enter the song length (minutes): </font>3
<font color="blue">Enter the song length (seconds): </font>59
<font color="blue">Enter the position: </font>1
<font color="blue">Song Added: Push By Matchbox 20

<font color="green">// menu not shown in the sample input/output</font>
Select a menu option: </font>P
<font color="blue">
<pre>
Song#     Title           Artist          Length
------------------------------------------------
1         Push            Matchbox 20      3:59
2         Radioactive     Imagine Dragons  4:28
</pre>
<font color="green">// menu not shown in the sample input/output</font>
Select a menu option: </font>A	

<font color="blue">Enter the song title: </font>Gangnam Style
<font color="blue">Enter the song artist: </font>PSY
<font color="blue">Enter the song length (minutes): </font>4
<font color="blue">Enter the song length (seconds): </font>9
<font color="blue">Enter the position: </font>2
<font color="blue">Song Added: Gangnam Style By PSY

<font color="green">// menu not shown in the sample input/output</font>
Select a menu option: </font>P

<font color="blue">
<pre>
Song#     Title           Artist          Length
------------------------------------------------
1         Push            Matchbox 20     3:59
2         Gangnam Style   PSY             4:09
3         Radioactive     Imagine Dragons 4:28 
</pre>
</font><font color="blue">
Select a menu option: <font color="#000000">S</font>
There are 3 song(s) in the current playlist. 

<font color="green">// menu not shown in the sample input/output</font>
Select a menu option: </font>R

<font color="blue">Enter the position: </font>1
<font color="blue">Song Removed at position 1

<font color="green">// menu not shown in the sample input/output</font>
Select a menu option: </font>P

<font color="blue">
<pre>
Song#     Title           Artist          Length
------------------------------------------------
1         Gangnam Style   PSY              4:09
2         Radioactive     Imagine Dragons  4:28
</pre>

<font color="green">// menu not shown in the sample input/output</font>
Select a menu option: </font>A	

<font color="blue">Enter the song title: </font>It's Time
<font color="blue">Enter the song artist: </font>Imagine Dragons
<font color="blue">Enter the song length (minutes): </font>5
<font color="blue">Enter the song length (seconds): </font>24
<font color="blue">Enter the position: </font>3
<font color="blue">Song Added: It's Time By Imagine Dragons

<font color="green">// menu not shown in the sample input/output</font>
Select a menu option: </font>P

<font color="blue">
<pre>
Song#     Title           Artist          Length
------------------------------------------------
1         Gangnam Style   PSY              4:09
2         Radioactive     Imagine Dragons  4:28
3         It's Time       Imagine Dragons  5:24
</pre>
<font color="green">// menu not shown in the sample input/output</font>
Select a menu option: </font>B

<font color="blue">Enter the artist: </font>Imagine Dragons
<font color="blue">
<pre>
Song#     Title           Artist          Length
------------------------------------------------
1         Radioactive    Imagine Dragons  4:28
2         It's Time      Imagine Dragons  5:24 
</pre>
</font><font color="green">
//Note the song numbers in comparison with the previous example:</font><font color="blue">

<font color="green">// menu not shown in the sample input/output</font>
Select a menu option: </font>P
<font color="blue">
<pre>
Song#     Title           Artist          Length
------------------------------------------------
1         Gangnam Style   PSY              4:09
2         Radioactive     Imagine Dragons  4:28
3         It's Time       Imagine Dragons  5:24
</pre>

<font color="green">// menu not shown in the sample input/output</font>
Select a menu option: </font>G

<font color="blue">Enter the position: </font>2<font color="blue">
<pre>
Song#     Title           Artist          Length
------------------------------------------------
2         Radioactive     Imagine Dragons  4:28
</pre>

</font><font color="green">//No songs found by artist:</font><font color="blue">
Select a menu option: </font>B
<font color="blue">Enter the artist: </font>Blink 182
<font color="blue">
<pre>
Song#     Title           Artist          Length
------------------------------------------------
</pre>

</font><font color="green">//Invalid Input examples:</font><font color="blue">
</font><font color="blue">Select a menu option: </font>R
<font color="blue">Enter the position: </font>4
<font color="blue">No song at position 4 to remove.

<font color="green">// menu not shown in the sample input/output</font>
Select a menu option: </font>A	

<font color="blue">Enter the song title: </font>Some Other
<font color="blue">Enter the song artist: </font>Song
<font color="blue">Enter the song length (minutes): </font>2
<font color="blue">Enter the song length (seconds): </font>14
<font color="blue">Enter the position: </font>9
<font color="blue">Invalid position for adding the new song.

<font color="green">// menu not shown in the sample input/output</font>
Select a menu option: </font>A	

<font color="blue">Enter the song title: </font>Some Other
<font color="blue">Enter the song artist: </font>Song
<font color="blue">Enter the song length (minutes): </font>2
<font color="blue">Enter the song length (seconds): </font>214
<font color="blue">Enter the position: </font>3
<font color="blue">Invalid song length.</font><font color="blue">

<font color="green">// menu not shown in the sample input/output</font>
Select a menu option: </font>Q

<font color="blue">Program terminating normally...</font></pre>
<hr>

<p align="center"><font face="Arial" color="#800000"><strong>
<a href="http://www.cs.sunysb.edu/~cse214/courseinfo.htm">Course Info</a> | 
<a href="http://www.cs.sunysb.edu/~cse214/schedule.htm">Schedule</a> | 
<a href="http://www.cs.sunysb.edu/~cse214/sections.htm">Sections</a> | 
<a href="http://www.cs.sunysb.edu/~cse214/announcements.htm">Announcements</a> | 
<a href="http://www.cs.sunysb.edu/~cse214/homework.htm">Homework</a> | 
<a href="http://www.cs.sunysb.edu/~cse214/exams.htm">Exams</a> | 
<a href="http://www.cs.sunysb.edu/~cse214/help.htm">Help/FAQ</a> | 
<a href="http://www.cs.sunysb.edu/~cse214/grades.htm">Grades</a> | 
<a href="http://www.cs.sunysb.edu/~cse214/index.html">HOME</a>
</strong></font></p>


<br>
<!-- Feel free to visit us during office hours or email us with your questions: <br>
 <b>
<a href="mailto:esmaili@cs.sunysb.edu">Ahmad Esmaili</a-->
</html>
