<html>

<head>
<meta http-equiv="Content-Type"
content="text/html; charset=iso-8859-1">
<meta name="Microsoft Theme" content="none, default">
<meta name="Microsoft Border" content="none, default">
<meta name="GENERATOR" content="Microsoft FrontPage 4.0">
<style type="text/css">
	body {font-family:Arial}
	.programOutput {color: Blue;}
	.programComments {color: Green}
	.userInput {color: Black}
	dt {color:Green}
</style>

<title>CSE214 Homework 2</title>
</head>

<body bgcolor="#FFFFFF" style="margin:2em">

<h2 align="center"><img border="0" src="http://www.cs.sunysb.edu/~cse214/images/logo.gif" width="200" height="100">&nbsp; <font
color="#800080"><br>
</font><font color="#808000" face="Arial">HOMEWORK - SPRING 2025</font></h2>

<hr>

<h3><font face="Arial"><strong>HOMEWORK 2 - Sunday, March 23<sup>rd</sup>                      
 before 7PM (China time)<br>
 &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;


<p><font face="Arial"><strong>REMINDERS: 
<ul>
    <li>Be sure your code follows the <a href="http://www.cs.sunysb.edu/~cse214/codingstyle.htm" >coding
    style</a> for CSE214. </li>

    <li>Make sure you read the warnings about <a href="http://www.cs.sunysb.edu/~cse214/courseinfo.htm" >academic
    dishonesty</a>. <i>Remember, all work you submit for homework or exams MUST be your own work.</i> </li>

    <li>Submit Assignment: upload and submit your assignment in QQ Group.  </li>

    <li><!--span style="color:green">All lists in this assignment must be implemented as arrays of objects.</span--> <span style="color:red">You are NOT 
	allowed to use  ArrayList, LinkedList, Vector, Java API LinkedList or any other Java API Data Structure
     classes to implement this assignment.</span></li>

    <li>You may use Scanner, InputStreamReader, or any other class that you wish for keyboard input.</li>
</ul>
	 </strong></font></p>
<p><b>
Radio-frequency identification (RFID)--the emerging
technology that involves small application-specific
integrated chips affixed to individual products or
pallets that emits a unique identification number over
a radio frequency-- promises to revolutionize supply
chains in a new era of efficiency, cost savings, and
business intelligence. RFID has
 been around in some form, such as anti-theft immobilizers, for
more than a decade. But large organizations, including
department stores, are accelerating its adoption by
mandating that their suppliers and members use the
technology. RFID technology is an automatic way to
collect product, place, time or transaction data
quickly and easily without human 
intervention. It comprises a wireless reader (or
interrogator), its associated antenna and small
electronic transponders (Tags/ RFID Cards),
and related  infrastructure that carry the data.
The goal of this assignment is to write a Java program that manages a department store's inventory using RFID as a key in a doubly-linked list and also to write a simulator 
that allows merchandise to be manipulated within the store.
&nbsp;</b></p>
<p><strong>1. Write a fully-documented class named ItemInfo that contains various 
information about a specific item that can or has been sold in a given 
department store.  Include the product's name(String) and price(a positive 
double) as fields along with the information in the following format:

<br><br>-rfidTagNumber: a String that encodes the radio frequency for scanning 
the item.  It is 9 characters long and represented in hexadecimal 
format(base 16) which means each character is either a digit from 0 to 9 
or one of the letters A through F, where case is not important.  The 
length of this String is to be fixed at 9.

<br><br>-Original Location: a String that encodes the original shelf position of 
the item.  The first character is 's' to designate that it is a shelf 
position and it is followed by a 5 digit shelf number to further 
specify where it can be found in the store.  (Examples may be "s00013", 
"s90909", "s32760", etc.).  The length of the String is to be fixed at 6.

<br><br>-Current Location: a String that represents the location of the item at 
the current time.  It may be a shelf position (as described above), an 
encoding of a cart number, which is designated by the letter 'c' followed 
by a 3 digit number ("c101", "c001", "c347", etc.), or it may have been 
checked out by a customer already in which case the location will be 
represented by the String "out", where case is not important.

<br><br>For this class, provide a constructor and accessor/mutator methods for 
each field.  When you set the original position of an item you should 
also set the current location of that item to the same place.  Make sure 
that you error check the format of each field as specified above and use 
exceptions to handle this where it is necessary.  Write the complete 
specification for this class as well.
<i>(NOTE: Because error checking and validation of data is only worth 7 
points, DO NOT spend all of your time working on this part of the 
assignment.  A better approach would be to assume, at first, that all 
input is correct and once you have the rest of the program functional you 
may go back and validate the data.
)</i></strong></p>
<p><strong>2. Write a fully-documented class named ItemInfoNode that contains a 
reference to an ItemInfo object as well as to two other ItemInfoNode 
objects, referred to as prev and next.  Below is a partial specification 
and it is up to you to fill in the remaining details:
</strong></p>
<blockquote>
  <p><strong>public class ItemInfoNode</strong></p>
</blockquote>
<ul>
  <li><strong>Constructor for ItemInfoNode<br>
    public ItemInfoNode()<br>
    </strong></li>
  <li><strong>setInfo<br>
    public void setInfo(ItemInfo info)<br>
    </strong></li>
  <li><strong>getInfo<br>
    public ItemInfo getInfo()<br>
    </strong></li>
  <li><strong>setNext<br>
    public void setNext(ItemInfoNode node)<br>
    </strong></li>
  <li><strong>setPrev<br>
    public void setPrev(ItemInfoNode node)<br>
    </strong></li>
  <li><strong>getNext<br>
    public ItemInfoNode getNext()<br>
    </strong></li>
  <li><strong>getPrev<br>
    public ItemInfoNode getPrev()<br>
    </strong></li>
</ul>
<p><strong>3. Write a fully-documented class named ItemList that contains 
references to the head and tail of a list of ItemInfoNode nodes. Your 
class will follow this specification, but you have to fill in the details:
</strong></p>
<blockquote>
  <p><strong>public class ItemList</strong></p>
</blockquote>
<ul>
  <li><strong>Constructor for ItemList<br>
    public ItemList()<br>
    </strong></li>
  <li><strong>insertInfo<br>
    public void insertInfo(String name, String rfidTag, double price, String initPosition)<br>
    Inserts the info into the list in its correct position based on its rfidTagNumber.&nbsp;<br>
    <i>
    NOTE: Multiple instances of a given item ARE allowed in the list.  When 
    you are inserting a duplicate item into the list, the order of items of 
    the same type doesn't matter as long as they are together and, as a group, 
    they appear in the correct spot in the list.<br> 
    HINT: The list should always be sorted by rfidTagNumber. However, this 
    doesn't mean you run a sorting algorithm on the list. As you insert each 
    info into the sorted list, traverse the list to figure out where the new 
    info should go and insert there. Then the new list is still sorted without 
    running a sorting algorithm.
    </i><br>
   <!-- NOTE: The above parameter list is optional and you may change it as you wish.</i><br> -->  
    </strong></li>
  <li><strong>removeAllPurchased<br>
    public void removeAllPurchased()<br>
    Removes all nodes in the list that have current location listed as "out" and displays a list of all items that have 
    been removed in this fashion.&nbsp;<br>
    <i>
    NOTE: Do not destroy the list as you do this.<br> 
    HINT: You might want to consider writing a helper method that removes a 
    specific node from the list, given a reference to that node, and call it as many times as are needed to complete this process.
    </i><br>
    </strong></li>
  <li><strong>moveItem<br>
    public boolean moveItem(String rfidTag, String source, String dest)<br>
    Moves an item with a given rfidTagNumber from a source location to a dest location.  The 
    return value indicates whether or not an item of the given rfidTagNumber was 
    found at the given source location.  Throw an exception if dest is of an
    invalid format (that it is not a cart, shelf, or "out") and also if source 
    is equal to "out".
    &nbsp;<br>
    </strong></li>
  <li><strong>printAll<br>
    public void printAll()<br>
    Prints a neatly formatted list of all items currently in the list.  
    The table should include each item's name, rfidTagNumber, original location,
    current location, and price.  The list must be sorted in order of rfidTagNumber, although duplicate
    rfidTagNumber entries may be printed in any order.
    &nbsp;<br>
    <i>NOTE: Do
    not destroy the list as you do this.</i><br>
    </strong></li>
  <li><strong>printByLocation<br>
    public void printByLocation(String location)<br>
    Prints a neatly formatted list of all items in a specified current location.  The 
    table should include each item's name, rfidTagNumber, original location, 
    current location, and price.  The list must be sorted in order of rfidTagNumber, although duplicate
    rfidTagNumber entries may be printed in any order.
    &nbsp;<br>
    <i>NOTE: Do
    not destroy the list as you do this.</i><br>
    </strong></li>
  <li><strong>cleanStore<br>
    public void cleanStore()<br>
    Take every item that is currently in the store and on the wrong shelf and 
    places it back where it belongs (its original location).  Items that are 
    "out" or currently in a cart are not affected by this command.  Display a table for all out of place items moved 
    in this fashion, including each item's name, rfidTagNumber, current location(before the move), 
    original location and price.
    &nbsp;<br>
    <i>NOTE: Do
    not destroy the list as you do this.</i><br>
    </strong></li>
  <li><strong>checkOut<br>
    public double checkOut(String cartNumber)<br>
    Goes through a given cart and checks out each item (changes its location 
    to "out").  A neatly formatted list of the items checked out is to be printed and it must be sorted in order of 
    rfidTagNumber, although duplicate rfidTagNumber entries may be printed in any order.  The return value is the 
    total cost for the items that were in the cart.  Throw appropriate exceptions for invalid cart numbers.
    &nbsp;<br>
    <i>NOTE: Do
    not destroy the list as you do this.</i><br>
    </strong></li>
</ul>
<blockquote>
  <blockquote>
    <table border="2" width="85%">
      <tr>
        <td width="100%"><b>SPECIAL NOTE: For these seven methods (not the
          constructor), you should
          determine their order of complexity using Big-O notation, where N is the number of infos in the items list.&nbsp;<font color=red>You should write a comment in each method that gives the order of complexity along with a concise but accurate explanation.&nbsp;</font></b></td>
      </tr>
    </table>
  </blockquote>      
</blockquote>
<p><strong>4. Write a fully-documented class named DepartmentStore.  This class 
will contain a main method that provides a menu with the following options to interact 
with the program and update the store inventory information: 
</strong></p>    
<ul>
  <li><b>I (Insert an item into the list)<br>
    Prompts the user for the information about a new item.  (see INPUT FORMAT below).<br>
    If all the data entered by the user is valid, the entry is to be inserted into the 
    list into the correct position.  &nbsp;<br>
    If any part of the input is invalid you should report the error to the user and ignore the entry.  </b></li>
  <li><b>M (Move an item in the store)<br>
    Prompts the user for an rfidTagNumber, a source location, and a destination location of an item to move.<br>
    If the item is not found, report the situation to the user and do nothing.<br>
    If there are duplicate items with the same rfidTagNumber in one location, moving any given one of them is fine.<br>
    Because we are assuming that there will be no returns or 
    shoplifting, "out" will not be considered a valid entry for either the 
    source or destination through this command.
    If it is entered, simply inform the user and ignore the request.</b></li>
  <li><b>L (List by location)<br>
    Prompts the user for a location in the store and prints the list of 
    all items that are currently in that location, sorted by rfidTagNumber.&nbsp;<br>
    If the location entered is not a valid location, print an error message indicating that this is the case.<br>
    <i>NOTE: DO NOT use a sorting algorithm to sort this list.  Also, if there are duplicate items by rfidTagNumber, the order of 
    printing DOES NOT matter.</i></b></li>
  <li><b>P (Print all items in store)<br>
    Prints the list of all items that are currently stored in the system, sorted by rfidTagNumber.<br> 
    This includes everything that is on a shelf, in a cart, or "out".<br>
    <i>NOTE: DO NOT use a sorting algorithm to sort this list.  Also, if there are duplicate items by rfidTagNumber, the order of 
    printing DOES NOT matter.</i></b></li>
 <li><b>O (Checkout)<br>
    Takes a cart number and changes the location of every item in the corresponding cart to "out".<br>  
      Print a formatted table of all items that have been checked out in this process.
     <br> Print a message to the user of the total cost of all the items that were in the given cart.
    </b></li>
 <li><b>C (Clean store)<br>
    Goes through all items that are currently on a shelf that isn't their 
    original location and places them back to their original position.<br>  This 
    does not affect items in carts or items that are "out".<br>  Print a formatted table of all items that have been moved in this process.
    </b></li>
 <li><b>U (Update inventory system)<br>
    Goes through the store's inventory and removes all items that are 
    listed as being "out" from the system.<br>  Items that are in carts or on 
    shelves are not affected by this command.<br>  Print a formatted table of all items that have been removed in this process.
    </b></li>
 <li><b>R (Print by RFID tag number) <font color=red>(Optional)&nbsp;</font> <br>
    Goes through the store's inventory and prints all items that have the given rfidTagNumber.
    <br>The table is to be printed in the same format as the other print commands.
    </b></li>
  <li><b>Q (Exit the program.)</b></li>
</ul>
<p><b>5. Supply any exception handling class(es) that you need in addition to
the classes above.</b></p>
<p><strong><u>INPUT FORMAT</u></strong></p><ul>
<strong>
<!--p><strong><li>When a user inputs data, the input will be on a SINGLE LINE in the following format:</strong></p-->
<!--strong><pre> name  rfidTagNumber  originalPosition price</pre-->
<!---li>Above format is also used for the input text file.  -->
<li>Strings are not case sensitive. 
<li>Menu options are not case sensitive  and must be checked for errors.
<li>The length of the name field has a maximum of 20 characters.
<!--li>If the user does not enter all required values on an input line, ignore the entry.-->
<!--li>If the user enters more than required values on the line, process the required values and ignore all extra values. -->
<li>You may assume that the entries are of the correct Java type (String, String, String, double), but you must check to see if they themselves are valid for that given field.
<!--li>You may assume all spaces are field boundaries, meaning that if a name has multiple words they will be separated by an underscore.-->
<li>All
     lists must be printed in a nice and tabular form as shown in the sample
     output. You may use C style formatting as shown in the following example.
     The example below shows two different ways of displaying the name and
     address at pre-specified positions 21, 26, 19, and 6 spaces wide. If the
     '-' flag is given, then it will be left-justified (padding will be on the
     right), else the region is right-justified.&nbsp;<span class=GramE>The 's'</span>&nbsp;identifier
     is for strings, the 'd' identifier is for integers. Giving the additional
     '0' flag pads an integer with additional zeroes in front.</li>
	 <pre>
	String name = "Doe Jane";
	String address = "32 Bayview Dr.";
	String city = "Fishers Island, NY";
	int zip = 6390;

	System.out.println(String.format("%-21s%-26s%19s%06d", name, address, city, zip));
	System.out.printf("%-21s%-26s%19s%06d", name, address, city, zip);

	Doe Jane             32 Bayview Dr.             Fishers Island, NY 06390
	Doe Jane             32 Bayview Dr.             Fishers Island, NY 06390

	 </pre>
</ul></b></strong>

<p><strong><u>OUTPUT FORMAT</u></strong></p> <ul>
<li><strong>Be sure your prompts and error messages for the user are clear and 
understandable.&nbsp;</strong></li>
<li><strong>All prices must be printed to exactly two decimal places.&nbsp;</strong></li>
</ul>	 

<h3><u>SAMPLE INPUT/OUPUT</u></h3>
<b>Note: User input is in black, computer generated output appears in&nbsp;<span style="color:blue">blue</span><span style='color:black'>&nbsp;and comments are in&nbsp;</span><span style='color:green'>green</span>
<pre>  
    Welcome!
	
    C - Clean store 
    I - Insert an item into the list 
    L - List by location 
    M - Move an item in the store 
    O - Checkout  
    P - Print all items in store 
    R - Print by RFID tag number         <span style="color:red">(optional - extra credit)</span>
    U - Update inventory system   
    Q - Exit the program. 
	 
<span class="programOutput">
	 
Please select an option: <span class="userInput">I</span>
Enter the name: <span class="userInput">Dress Shirt</span>	
Enter the RFID: <span class="userInput">00A5532FF</span>	
Enter the original location: <span class="userInput">s12345</span>	
Enter the price: <span class="userInput">30.00</span>	
	 

<span class="programComments">//Main Menu is printed</span>

Please select an option: <span class="userInput">I</span>
Enter the name: <span class="userInput">Red Towel</span>	
Enter the RFID: <span class="userInput">0F999FABC</span>	
Enter the original location: <span class="userInput">s00347</span>	
Enter the price: <span class="userInput">18.00</span>	

<span class="programComments">//Main Menu is printed</span>

Please select an option: <span class="userInput">I</span>
Enter the name: <span class="userInput">Silverware Set</span>	
Enter the RFID: <span class="userInput">A1111DDFF</span>	
Enter the original location: <span class="userInput">s90210</span>	
Enter the price: <span class="userInput">50.00</span>	

<span class="programComments">//Main Menu is printed</span>

Please select an option: <span class="userInput">I</span>
Enter the name: <span class="userInput">Dress Shirt</span>	
Enter the RFID: <span class="userInput">00A5532FF</span>	
Enter the original location: <span class="userInput">s12345</span>	
Enter the price: <span class="userInput">30.00</span>	
	 
<span class="programComments">//Main Menu is printed</span>

Please select an option: <span class="userInput">I</span>
Enter the name: <span class="userInput">Blue Towel</span>	
Enter the RFID: <span class="userInput">0F999FCBA</span>	
Enter the original location: <span class="userInput">s00347</span>	
Enter the price: <span class="userInput">18.00</span>	

	 
<span class="programComments">//Main Menu is printed</span>

Please select an option: <span class="userInput">I</span>
Enter the name: <span class="userInput">Dress Shirt</span>	
Enter the RFID: <span class="userInput">00A5532FF</span>	
Enter the original location: <span class="userInput">s12345</span>	
Enter the price: <span class="userInput">30.00</span>	


Please select an option: <span class="userInput">P</span>

	
                               Original        Current
Item Name         RFID         Location        Location     Price
---------       ---------     ---------        ---------   ------
Dress Shirt     00A5532FF       s12345          s12345      30.00
Dress Shirt     00A5532FF       s12345          s12345      30.00
Dress Shirt     00A5532FF       s12345          s12345      30.00
Red Towel       0F999FABC       s00347          s00347      18.00
Blue Towel      0F999FCBA       s00347          s00347      18.00
Silverware Set  A1111DDFF       s90210          s90210      50.00  


<span class="programComments">//Main Menu is printed</span>

Please select an option: <span class="userInput">M</span>
Enter the RFID: <span class="userInput">00A5532FF</span>	
Enter the original location: <span class="userInput">s12345</span>	
Enter the new location: <span class="userInput">c105</span>	


<span class="programComments">//Main Menu is printed</span>

Please select an option: <span class="userInput">M</span>
Enter the RFID: <span class="userInput">00A5532FF</span>	
Enter the original location: <span class="userInput">s12345</span>	
Enter the new location: <span class="userInput">c109</span>	


<span class="programComments">//Main Menu is printed</span>

Please select an option: <span class="userInput">M</span>
Enter the RFID: <span class="userInput">00A5532FF</span>	
Enter the original location: <span class="userInput">c109</span>	
Enter the new location: <span class="userInput">s10000</span>	


<span class="programComments">//Main Menu is printed</span>

Please select an option: <span class="userInput">M</span>
Enter the RFID: <span class="userInput">A1111DDFF</span>	
Enter the original location: <span class="userInput">s90210</span>	
Enter the new location: <span class="userInput">s12345</span>	


Please select an option: <span class="userInput">P</span>

	
                               Original        Current
Item Name         RFID         Location        Location     Price
---------       ---------     ---------        ---------   ------
Dress Shirt     00A5532FF       s12345          s12345      30.00
Dress Shirt     00A5532FF       s12345          s10000      30.00
Dress Shirt     00A5532FF       s12345          c105        30.00
Red Towel       0F999FABC       s00347          s00347      18.00
Blue Towel      0F999FCBA       s00347          s00347      18.00
Silverware Set  A1111DDFF       s90210          s12345      50.00  


<span class="programComments">//Main Menu is printed</span>

Please select an option: <span class="userInput">O</span>
Enter the cart number: <span class="userInput">c105</span>	

                               Original        Current
Item Name         RFID         Location        Location     Price
---------       ---------     ---------        ---------   ------
Dress Shirt     00A5532FF       s12345          c105        30.00

The total cost for all merchandise in cart 105 was $30.00
 
<span class="programComments">//Main Menu is printed</span>

Please select an option: <span class="userInput">P</span>

	
                               Original        Current
Item Name         RFID         Location        Location     Price
---------       ---------     ---------        ---------   ------
Dress Shirt     00A5532FF       s12345          s12345      30.00
Dress Shirt     00A5532FF       s12345          s10000      30.00
Dress Shirt     00A5532FF       s12345          out         30.00
Red Towel       0F999FABC       s00347          s00347      18.00
Blue Towel      0F999FCBA       s00347          s00347      18.00
Silverware Set  A1111DDFF       s90210          s12345      50.00  


<span class="programComments">//Main Menu is printed</span>

Please select an option: <span class="userInput">L</span>
Enter the location: <span class="userInput">s12345</span>	


                               Original        Current
Item Name         RFID         Location        Location     Price
---------       ---------     ---------        ---------   ------
Dress Shirt     00A5532FF       s12345          s12345      30.00
Silverware Set  A1111DDFF       s90210          s12345      50.00  



<span class="programComments">//Main Menu is printed</span>

Please select an option: <span class="userInput">C</span>

The following item(s) have been moved back to their original locations:

                               Original        Current
Item Name         RFID         Location        Location     Price
---------       ---------     ---------        ---------   ------
Dress Shirt     00A5532FF       s12345         s10000       30.00
Silverware Set  A1111DDFF       s90210         s12345       50.00  


<span class="programComments">//Main Menu is printed</span>

Please select an option: <span class="userInput">U</span>

The following item(s) have removed from the system:

                               Original        Current
Item Name         RFID         Location        Location     Price
---------       ---------     ---------        ---------   ------
Dress Shirt     00A5532FF       s12345          out         30.00


<span class="programComments">//Main Menu is printed</span>

Please select an option: <span class="userInput">P</span>

	
                               Original        Current
Item Name         RFID         Location        Location     Price
---------       ---------     ---------        ---------   ------
Dress Shirt     00A5532FF       s12345          s12345      30.00
Dress Shirt     00A5532FF       s12345          s12345      30.00
Red Towel       0F999FABC       s00347          s00347      18.00
Blue Towel      0F999FCBA       s00347          s00347      18.00
Silverware Set  A1111DDFF       s90210          s90210      50.00  


<span class="programComments">//Main Menu is printed</span>

Please select an option: <span class="userInput">Q</span>

Goodbye!


</span>
</b>
</pre>
<hr>

<p align="center"><font face="Arial" color="#800000"><strong>
<a href="../courseinfo.htm">Course Info</a> | 
<a href="../schedule.htm">Schedule</a> | 
<a href="../sections.htm">Sections</a> | 
<a href="../announcements.htm">Announcements</a> | 
<a href="../homework.htm">Homework</a> | 
<a href="../exams.htm">Exams</a> | 
<a href="../help.htm">Help/FAQ</a> | 
<a href="../grades.htm">Grades</a> | 
<a href="../index.html">HOME</a>
</strong></font></p>

</body>
</html>

